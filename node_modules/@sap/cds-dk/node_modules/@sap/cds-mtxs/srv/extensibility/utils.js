const { path, tar, read, readdir } = cds.utils
const linter = require('./linter')
const LOG = cds.log('mtx')
const { getCompilerError } = require('../../lib/utils')

const readData = async function (extension, root) {
    await tar.xvz(extension).to(root)

    let extCsn = {}
    try { extCsn = JSON.parse(await read(path.join(root, 'extension.csn'))) }
    catch(e) { if (e.code !== 'ENOENT') throw e }

    let bundles
    try { bundles = await read(path.join(root, 'i18n', 'i18n.json')) }
    catch(e) { if (e.code !== 'ENOENT') throw e }

    let csvs = {}
    try {
      const flist = await readdir(path.join(root, 'data'))
      for(let file of flist) {
        const basename = path.basename(file)
        csvs[basename] = await read(path.join(root, 'data', file))
      }
    }
    catch(e) { if (e.code !== 'ENOENT') throw e }

    return { extCsn, bundles, csvs }
}

const runLinter = async function (tenant, extCsn, tag) {

  LOG.info(`validating extension '${tag}' ...`)
  const { 'cds.xt.ModelProviderService': mps } = cds.services
  // REVISIT: Isn't that also done during activate?

  let csn
  try {
    csn = await mps.getCsn(tenant, cds.context.features)
  } catch (err) {
    throw new cds.error ({ message: getCompilerError(err.messages), code: 400 })
  }

  const findings = linter.lint(extCsn, csn)
  if (findings.length > 0) {
    let message = `Validation for ${tag} failed with ${findings.length} finding(s):\n\n`
    message += findings.map(f => '  - ' + f.message).join('\n') + '\n'
    throw new cds.error ({ message, status: 422 })
  }

}

module.exports = { readData, runLinter }