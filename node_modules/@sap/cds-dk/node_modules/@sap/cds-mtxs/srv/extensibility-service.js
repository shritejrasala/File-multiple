const cds = require('@sap/cds/lib')

const main = require('./config')
const { setExtension } = require('./extensibility/set')
const { push, pull } = require('./extensibility/push')
const { readExtension, updateExtension, deleteExtension } = require('./extensibility/crud')
const { token, authMeta } = require('./extensibility/token')
const { addCodeAnnotations } = require('./extensibility/code-extensibility/addCodeAnnotLocal')

const { getMigratedProjects } = require('../lib/migration/migration')
const { runLinter } = require('./extensibility/utils')
const LOG = cds.log('mtx')

module.exports = class ExtensibilityService extends cds.ApplicationService {

  async init() {
    this.on('push', push)
    this.on('pull', pull)

    this.on('set', setExtension)
    this.on('UPDATE', 'Extensions', updateExtension)
    this.on('DELETE', 'Extensions', deleteExtension)
    this.on('READ', 'Extensions', readExtension)

    this.on('getMigratedProjects', (req) => {
      let { tagRule, defaultTag } = req.data

      // REVIEW check if access for arbitrary tenants needed
      const tenant = req.tenant
      if (!tenant) req.reject(401, 'User not assigned to any tenant')

      return getMigratedProjects(req, tagRule || undefined, defaultTag || undefined, tenant)
    })

    const _in_prod = process.env.NODE_ENV === 'production'
    if (main.requires.extensibility?.code && !_in_prod && !main.requires.multitenancy) {
      const findings = await addCodeAnnotations()
      if (findings?.length > 0) {
        let message = `Code validation failed with ${findings.length} finding(s):\n\n`
        message += findings.join('\n')
        throw new Error(message)
      }
    }

    cds.on('served', () => {
      if (cds.app) {
        cds.app.post('/-/cds/login/token', token)
        cds.app.get('/-/cds/login/authorization-metadata', authMeta)
      }
    })

    return super.init()
  }

  // from push.js
  async activateExtension(tenant, tag, extCsn, bundles, csvs, sources, activate) {

    try {
      // remove current extension with tag
      if (tag) await DELETE.from('cds.xt.Extensions').where({ tag })

      // insert and activate extension
      const ID = cds.utils.uuid()
      await INSERT.into('cds.xt.Extensions').entries({
        ID,
        csn: JSON.stringify(extCsn),
        i18n: bundles ? JSON.stringify(bundles) : null,
        sources,
        activated: activate,
        tag
      })

      // do validation after extension table update - trust transaction handling for rollback
      // extension linters
      await runLinter(tenant, extCsn, tag)

      if (activate === 'database')  {
        LOG.info(`activating extension '${tag}' ...`)
        const { 'cds.xt.DeploymentService': ds } = cds.services
        await ds.extend(tenant, csvs)
      }
    } catch (error) {
      // needs to be serialized because it is stored in the db by the job service - TODO check for HDI error somehow?
      if (error.code || error.status) throw new Error(JSON.stringify(error))
      throw new Error(JSON.stringify({ status: 422, message: error.message })) // for HDI errors
    }
  }
}